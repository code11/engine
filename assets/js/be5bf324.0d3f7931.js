"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8866],{1332:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>d,metadata:()=>a,toc:()=>i});var o=t(7250),s=t(9596);const d={id:"wrapping-up",title:"Wrapping Up",sidebar_label:"Wrapping Up"},l=void 0,a={id:"tutorials/react/wrapping-up",title:"Wrapping Up",description:"We have learned almost all the concepts needed to build Engine apps.",source:"@site/docs/tutorials/react/wrapping-up.md",sourceDirName:"tutorials/react",slug:"/tutorials/react/wrapping-up",permalink:"/engine/docs/tutorials/react/wrapping-up",draft:!1,unlisted:!1,editUrl:"https://github.com/code11/engine/edit/master/docs/docs/tutorials/react/wrapping-up.md",tags:[],version:"current",frontMatter:{id:"wrapping-up",title:"Wrapping Up",sidebar_label:"Wrapping Up"},sidebar:"docs",previous:{title:"State as Communication Channel",permalink:"/engine/docs/tutorials/react/state-as-communication-channel"},next:{title:"Best Practices",permalink:"/engine/docs/best-practices"}},r={},i=[{value:"Clearing completed Todos",id:"clearing-completed-todos",level:2},{value:"Toggling status of all Todos",id:"toggling-status-of-all-todos",level:2},{value:"Removing Todos",id:"removing-todos",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"We have learned almost all the concepts needed to build Engine apps."}),"\n",(0,o.jsx)(n.p,{children:"Let's wrap up by finishing our Todos app. Three last UI elements that left\nputting life in are:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Clearing completed Todos"}),"\n",(0,o.jsx)(n.li,{children:"Toggling status of all Todos"}),"\n",(0,o.jsxs)(n.li,{children:['Removing a todo item when "X" button in ',(0,o.jsx)(n.code,{children:"Todo"})," is clicked"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["All these operations will follow the principles seen so far in the tutorial. A\n",(0,o.jsx)(n.code,{children:"view"})," will accept user's input, and store it in view agnostic manner in the\nglobal state, a ",(0,o.jsx)(n.code,{children:"producer"})," will get triggered and perform the actual operation."]}),"\n",(0,o.jsx)(n.h2,{id:"clearing-completed-todos",children:"Clearing completed Todos"}),"\n",(0,o.jsx)(n.p,{children:"Since removing Todo's is a new operation (i.e isn't an instance of deriving our\nstate to shape it differently), the producer responsible for it is kept closer\nto the view that will trigger the producer."}),"\n",(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.code,{children:"src/Footer.tsx"}),', add a click event listener for "Clear Completed" todos\nbutton. The view is going to use state as a communication channel to trigger the\nproducer (as discussed in ',(0,o.jsx)(n.a,{href:"/docs/tutorials/react/state-as-communication-channel",children:"last\nchapter"}),")."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:'const Footer: view = ({\n  pendingCount = observe.pendingCount,\n  filter = observe.filter,\n  updateFilter = update.filter,\n+ updateClearRequest = update.clearRequest\n}) => (\n...\n-     <button className="clear-completed">Clear completed</button>\n+     <button\n+       className="clear-completed"\n+       onClick={() => updateClearRequest.set(new Date().getTime())}\n+     >\n        Clear completed\n    </button>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["A new path has been introduced in the state (",(0,o.jsx)(n.code,{children:"clearRequest"}),"), which will contain\na value when a clear operation need to be performed. In same file (i.e\n",(0,o.jsx)(n.code,{children:"src/Footer.tsx"}),"), add a new producer which performs the actual operation of\nclearing completed todos."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const handleClearRequest: producer = ({\n  clearRequest = observe.clearRequest,\n  updateClearRequest = update.clearRequest,\n  getTodosById = get.todosById,\n  updateTodosById = update.todosById,\n}) => {\n  if (!clearRequest) {\n    return;\n  }\n\n  const todosById = getTodosById.value();\n  const nextTodos = Object.values(todosById)\n    .filter((todo: any) => todo.status !== TodoStatuses.done)\n    .reduce((accum: any, todo: any) => {\n      accum[todo.id] = todo;\n\n      return accum;\n    }, {});\n\n  updateTodosById.set(nextTodos);\n  updateClearRequest.set(null);\n};\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Add it to ",(0,o.jsx)(n.code,{children:"Footer"}),"'s producers:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"-Footer.producers([pendingCounter]);\n+Footer.producers([pendingCounter, handleClearRequest]);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Notice how ",(0,o.jsx)(n.code,{children:"handleClearRequest"})," producer is changing the value that acts as its\ntrigger, practically resetting it. This is also a common pattern in Engine apps."]}),"\n",(0,o.jsx)(n.h2,{id:"toggling-status-of-all-todos",children:"Toggling status of all Todos"}),"\n",(0,o.jsx)(n.p,{children:'Similarly, to toggle status of all Todos, create a new path in state to when the\n"Toggle All" checkbox is clicked, and a producer that gets triggered to do the\nactual work.'}),"\n",(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.code,{children:"src/App.tsx"}),", store the value in state:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:'- const App: view = ({ todoIds = observe.visibleTodoIds }) => (\n+ const App: view = ({\n+   pendingCount = observe.pendingCount,\n+   todoIds = observe.visibleTodoIds,\n+   updateToggleAllRequest = update.toggleAllRequest\n+ }) => (\n...\n-       <input id="toggle-all" className="toggle-all" type="checkbox" />\n+       <input\n+         id="toggle-all"\n+         className="toggle-all"\n+         type="checkbox"\n+         checked={pendingCount === 0}\n+         onChange={() => updateToggleAllRequest.set(new Date().getTime())}\n+       />\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Add a new producer ",(0,o.jsx)(n.code,{children:"handleToggleAllRequest"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const handleToggleAllRequest: producer = ({\n  toggleAllRequest = observe.toggleAllRequest,\n  updateToggleAllRequest = update.toggleAllRequest,\n  getTodosById = get.todosById,\n  getPendingCount = get.pendingCount,\n  updateTodosById = update.todosById,\n}) => {\n  if (!toggleAllRequest) {\n    return;\n  }\n\n  const todosById = getTodosById.value() as TodosById;\n  const pendingCount = getPendingCount.value();\n\n  const nextTodos = Object.values(todosById)\n    .map((todo) => {\n      return {\n        ...todo,\n        status: pendingCount !== 0 ? TodoStatuses.done : TodoStatuses.pending,\n      };\n    })\n    .reduce((accum, todo) => {\n      accum[todo.id] = todo;\n\n      return accum;\n    }, {} as TodosById);\n\n  updateTodosById.set(nextTodos);\n  updateToggleAllRequest.set(null);\n};\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Add it to ",(0,o.jsx)(n.code,{children:"App"}),"'s producers:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:"- App.producers([syncVisibleTodoIds]);\n+ App.producers([syncVisibleTodoIds, handleToggleAllRequest]);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"removing-todos",children:"Removing Todos"}),"\n",(0,o.jsxs)(n.p,{children:["Check out the documentation for ",(0,o.jsx)(n.a,{href:"/docs/api/update",children:"update"}),", and try to implement\nthis feature by yourself \ud83d\ude42"]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Solution"}),(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.code,{children:"src/Todo/View.tsx"}),","]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:'-       <button className="destroy" />\n+       <button className="destroy" onClick={() => updateTodo.remove()} />\n'})})]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},9596:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var o=t(7402);const s={},d=o.createContext(s);function l(e){const n=o.useContext(d);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(d.Provider,{value:n},e.children)}}}]);