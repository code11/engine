"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5689],{5693:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var i=n(7250),s=n(9596);const t={id:"observe",title:"observe",sidebar_label:"observe"},o=void 0,a={id:"api/observe",title:"observe",description:"Overview",source:"@site/docs/api/observe.md",sourceDirName:"api",slug:"/api/observe",permalink:"/engine/docs/api/observe",draft:!1,unlisted:!1,editUrl:"https://github.com/code11/engine/edit/master/docs/docs/api/observe.md",tags:[],version:"current",frontMatter:{id:"observe",title:"observe",sidebar_label:"observe"},sidebar:"docs",previous:{title:"view",permalink:"/engine/docs/api/view"},next:{title:"get",permalink:"/engine/docs/api/get"}},d={},c=[{value:"Overview",id:"overview",level:2},{value:"API",id:"api",level:2},{value:"<code>observe.&lt;path&gt;: any</code>",id:"observepath-any",level:3},{value:"Example",id:"example",level:2}];function l(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"observe"}),' gives the ability to observe values from global state. To get a "live"\nversion of a value from Engine\'s global state, state properties can be directly\naccessed from the imported ',(0,i.jsx)(r.code,{children:"observe"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Every use of ",(0,i.jsx)(r.code,{children:"observe"})," in a ",(0,i.jsx)(r.code,{children:"view"}),"/",(0,i.jsx)(r.code,{children:"producer"}),"'s header can be thought of as\nadding a trigger. Whenever the ",(0,i.jsx)(r.code,{children:"observe"}),"d value changes in state, for whatsoever\nreason, the view or producer using this value will be re-computed."]}),"\n",(0,i.jsx)(r.h2,{id:"api",children:"API"}),"\n",(0,i.jsx)(r.h3,{id:"observepath-any",children:(0,i.jsx)(r.code,{children:"observe.<path>: any"})}),"\n",(0,i.jsxs)(r.p,{children:["If ",(0,i.jsx)(r.code,{children:"<path>"})," is a valid path to an existing property of State, ",(0,i.jsx)(r.code,{children:"observe.<path>"}),"\nreturns value stored at that path in State, otherwise it returns ",(0,i.jsx)(r.code,{children:"undefined"}),". If\nthe value is serializable (e.g a primitive Javascript type, a plain object), a\ncopy of the data is returned. However, if the value is not serializable (e.g a\nclass instance, function etc), a reference to it is returned."]}),"\n",(0,i.jsx)(r.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(r.p,{children:"e.g if the state looks like:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-json",children:'{\n  "foo": {\n    "bar": "baz"\n  }\n}\n'})}),"\n",(0,i.jsxs)(r.p,{children:["value of ",(0,i.jsx)(r.code,{children:"bar"})," can be obtained by assigning ",(0,i.jsx)(r.code,{children:"observe.foo.bar"})," in header of the\n",(0,i.jsx)(r.a,{href:"/docs/api/view",children:"view"})," or ",(0,i.jsx)(r.a,{href:"/docs/api/producer",children:"producer"}),". For example,"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"const MyView: view = ({ barVal = observe.foo.bar }) => { ... }\n"})}),"\n",(0,i.jsxs)(r.p,{children:["Whenever an ",(0,i.jsx)(r.code,{children:"observe"}),"d value in state is changed (e.g with\n",(0,i.jsx)(r.a,{href:"/docs/api/update",children:"update"}),"), the view or producer using it is re-triggered."]})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},9596:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>a});var i=n(7402);const s={},t=i.createContext(s);function o(e){const r=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(t.Provider,{value:r},e.children)}}}]);