"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5899],{6340:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var i=t(7250),s=t(9596);const o={id:"introduction",title:"Introduction",sidebar_label:"Introduction",slug:"/"},a=void 0,r={id:"introduction",title:"Introduction",description:"What is the Code11 Engine?",source:"@site/docs/introduction.md",sourceDirName:".",slug:"/",permalink:"/engine/docs/",draft:!1,unlisted:!1,editUrl:"https://github.com/code11/engine/edit/master/docs/docs/introduction.md",tags:[],version:"current",frontMatter:{id:"introduction",title:"Introduction",sidebar_label:"Introduction",slug:"/"},sidebar:"docs",next:{title:"Getting started",permalink:"/engine/docs/getting-started"}},l={},c=[{value:"What is the Code<sup>11</sup> Engine?",id:"what-is-the-code11-engine",level:3},{value:"Goals",id:"goals",level:3},{value:"Principles",id:"principles",level:3},{value:"Simple views",id:"simple-views",level:4},{value:"Evolving State",id:"evolving-state",level:4},{value:"Reactive Computations",id:"reactive-computations",level:4}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h3,{id:"what-is-the-code11-engine",children:["What is the Code",(0,i.jsx)("sup",{children:"11"})," Engine?"]}),"\n",(0,i.jsx)(n.p,{children:"Engine is a declarative state management system for creating web applications."}),"\n",(0,i.jsx)(n.h3,{id:"goals",children:"Goals"}),"\n",(0,i.jsx)(n.p,{children:"Engine strives to build applications with"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Small codebase. Less code, less bugs, more hairs still on head"}),"\n",(0,i.jsx)(n.li,{children:"Less work for computer. Only compute what is needed for faster applications"}),"\n",(0,i.jsx)(n.li,{children:"Less work for developer. Minimal API which gets out of developers' way. Allows\nfocusing on business problems, not Engine problems"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"principles",children:"Principles"}),"\n",(0,i.jsxs)(n.p,{children:['Instead of creating perfect bricks and sticking them together into "the perfect\napplication", ',(0,i.jsx)(n.strong,{children:"mold your application just like you would do with clay"}),". Let it\ngradually evolve over time without any friction or constraints."]}),"\n",(0,i.jsx)(n.p,{children:"Engine is built with keeping real-world, evolving requirements in mind, and all\nthe challenges that come with it."}),"\n",(0,i.jsx)(n.h4,{id:"simple-views",children:"Simple views"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"A view is just another representation of some data"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/docs/api/view",children:"View"}),"s should be as simple as possible.\nA view does not do anything except:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Render the view it is supposed to display"}),"\n",(0,i.jsx)(n.li,{children:"Change the data it is supposed to represent"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"evolving-state",children:"Evolving State"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"At the core of every UI is a state"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The clay of an application is its ",(0,i.jsx)(n.a,{href:"/docs/concepts/state",children:"state"}),". Although the\ncore of the application, state in engine is simply a plain old Javascript\nObject. As the requirements evolve, so do the state, and views and logic\nassociated with it."]}),"\n",(0,i.jsx)(n.h4,{id:"reactive-computations",children:"Reactive Computations"}),"\n",(0,i.jsxs)(n.p,{children:["Components, plain data, and computations capable of reacting to changes\n(called ",(0,i.jsx)(n.a,{href:"/docs/api/producer",children:"producers"}),") to the data makes an Engine app."]}),"\n",(0,i.jsx)(n.p,{children:"Engine apps are reactive. They start with:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"an initial state (which can be empty as well)"}),"\n",(0,i.jsxs)(n.li,{children:["declare views that represent some part(s) of state e.g a\n",(0,i.jsx)(n.code,{children:"TodoListItem"})," component which needs a ",(0,i.jsx)(n.code,{children:"TodoItem"})," object from state"]}),"\n",(0,i.jsxs)(n.li,{children:["declare computations that depend on some part(s) of state, e.g a ",(0,i.jsx)(n.code,{children:"doneCounter"}),"\nfunction which depends on all ",(0,i.jsx)(n.code,{children:"TodoItems"})," in state to count number of done\ntodos"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Engine takes care of updating the view and re-running the computations only when\ntheir dependencies from state change. Head over to the ",(0,i.jsx)(n.a,{href:"/docs/getting-started",children:"Getting\nstarted"})," page for a sneak peek into how Engine apps look like, or\ntake a look at the ",(0,i.jsx)(n.a,{href:"/docs/tutorials/react/setup",children:"quick start tutorial"})," for a\nmore comprehensive guide to building an Engine app."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},9596:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(7402);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);