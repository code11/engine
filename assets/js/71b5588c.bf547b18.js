"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8564],{7343:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>s});var d=r(7250),t=r(9596);const i={id:"wildcard",title:"wildcard",sidebar_label:"wildcard"},c=void 0,a={id:"api/wildcard",title:"wildcard",description:"Experimental",source:"@site/docs/api/wildcard.md",sourceDirName:"api",slug:"/api/wildcard",permalink:"/engine/docs/api/wildcard",draft:!1,unlisted:!1,editUrl:"https://github.com/code11/engine/edit/master/docs/docs/api/wildcard.md",tags:[],version:"current",frontMatter:{id:"wildcard",title:"wildcard",sidebar_label:"wildcard"},sidebar:"docs",previous:{title:"param",permalink:"/engine/docs/api/param"},next:{title:"path",permalink:"/engine/docs/api/path"}},o={},s=[{value:"Overview",id:"overview",level:2},{value:"Example",id:"example",level:2},{value:"What changed?",id:"what-changed",level:3}];function l(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.p,{children:(0,d.jsx)(n.em,{children:"Experimental"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:'import { wildcard } from "@c11/engine.runtime";\n'})}),"\n",(0,d.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"wildcard"})," allow selecting arbitrarily deep paths from state."]}),"\n",(0,d.jsxs)(n.p,{children:["They are meant to be used by ",(0,d.jsx)(n.code,{children:"producer"})," to obtain more powerful triggers."]}),"\n",(0,d.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,d.jsx)(n.p,{children:"For example:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-tsx",children:"cons titleWatchProducer: producer = ({\n  title = observe.todos[wildcard].title\n}) => { ... }\n"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"titleWatchProducer"})," will re-run whenever any todo's title changes."]}),"\n",(0,d.jsx)(n.h3,{id:"what-changed",children:"What changed?"}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"wildcard"})," triggers producer whenever anything on the matching path changes, but\n",(0,d.jsx)(n.code,{children:"producer"})," won't know what exactly has changed. To get information about exactly\nwhat has changed, ",(0,d.jsx)(n.code,{children:"wildcard"})," can be assigned to another\n",(0,d.jsx)(n.a,{href:"/docs/api/arg",children:"arg"}),", to get information about exactly which path\nhas received the change. For example,"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-tsx",children:"const prod: producer = ({\n  id = wildcard,\n  title = observe.todos[arg.id].title\n}) => { ... }\n"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"id"})," will contain the changed todo's ID."]}),"\n",(0,d.jsxs)(n.p,{children:["Assign the ",(0,d.jsx)(n.code,{children:"wildcard"})," to an ",(0,d.jsx)(n.code,{children:"arg"})," is also the only way to use ",(0,d.jsx)(n.code,{children:"wildcard"})," with\n",(0,d.jsx)(n.code,{children:"update"})," operator. Only ",(0,d.jsx)(n.code,{children:"observe"})," can make use of ",(0,d.jsx)(n.code,{children:"wildcard"})," directly in its\npath."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}},9596:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>a});var d=r(7402);const t={},i=d.createContext(t);function c(e){const n=d.useContext(i);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),d.createElement(i.Provider,{value:n},e.children)}}}]);