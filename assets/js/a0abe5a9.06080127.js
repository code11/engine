"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1705],{9341:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>d});var a=n(7250),s=n(9596);const t={id:"arg",title:"arg",sidebar_label:"arg"},o=void 0,i={id:"api/arg",title:"arg",description:"Overview",source:"@site/docs/api/arg.md",sourceDirName:"api",slug:"/api/arg",permalink:"/engine/docs/api/arg",draft:!1,unlisted:!1,editUrl:"https://github.com/code11/engine/edit/master/docs/docs/api/arg.md",tags:[],version:"current",frontMatter:{id:"arg",title:"arg",sidebar_label:"arg"},sidebar:"docs",previous:{title:"prop",permalink:"/engine/docs/api/prop"},next:{title:"param",permalink:"/engine/docs/api/param"}},c={},d=[{value:"Overview",id:"overview",level:2},{value:"Example",id:"example",level:2}];function l(e){const r={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.code,{children:"arg"})," allows referring to other arguments in the header of a\n",(0,a.jsx)(r.a,{href:"/docs/api/producer",children:"producer"})," or ",(0,a.jsx)(r.a,{href:"/docs/api/view",children:"view"}),". It makes it possible\nto treat other keys of the header object as local variables. All of the\nfollowing are valid uses of ",(0,a.jsx)(r.code,{children:"arg"}),":"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-ts",children:"        const result: producer = ({\n          a1 = '123',\n          a2 = arg.a1,            // Access previously defined argument\n          a3 = arg.b1.b2.b3.b4    // Access nested properties of another arg\n          a4 = arg.a2[arg.a1],    // Dynamically access argument properties based on other arg\n          a5 = arg.a3[prop.foo],  // Dynamically access argument properties based on other Engine operators\n        }) => { }\n"})}),"\n",(0,a.jsx)(r.h2,{id:"example",children:"Example"}),"\n",(0,a.jsxs)(r.p,{children:["If we have a ",(0,a.jsx)(r.code,{children:"TodoItem"})," component which accepts a single arg ",(0,a.jsx)(r.code,{children:"id: string"}),", and\nglobal state which looks like:"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-ts",children:'{\n  todosById: {\n    todo1: { title: "My first todo" }\n  },\n  tagsByTitle: {\n    "My first todo": ["tag1", "tag2"]\n  }\n}\n'})}),"\n",(0,a.jsxs)(r.p,{children:["It is possible to access tags for the Todo with ",(0,a.jsx)(r.code,{children:"id"}),", by composing path using\n",(0,a.jsx)(r.code,{children:"arg"}),":"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-tsx",children:"const TodoItem: view = ({\n  title: observe.todosById[prop.id],\n  tags: observe.tagsByTitle[arg.title]\n}) => { ... }\n"})}),"\n",(0,a.jsxs)(r.p,{children:["In this example, ",(0,a.jsx)(r.code,{children:"TodoItem"})," will have access to ",(0,a.jsx)(r.code,{children:'tags = ["tag1", "tag2"]'}),"."]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.code,{children:"arg"})," is also very useful with combined with\n",(0,a.jsx)(r.a,{href:"/docs/api/wildcard",children:"wildcard"})]})]})}function p(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},9596:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>i});var a=n(7402);const s={},t=a.createContext(s);function o(e){const r=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(t.Provider,{value:r},e.children)}}}]);