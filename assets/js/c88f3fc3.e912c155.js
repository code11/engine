"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8557],{9200:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>d,metadata:()=>a,toc:()=>r});var o=t(7250),s=t(9596);const d={id:"updating-state-from-components",title:"Updating State from Components",sidebar_label:"Updating State"},i=void 0,a={id:"tutorials/react/updating-state-from-components",title:"Updating State from Components",description:"Rendering our state in components is one piece of the puzzle, another piece is",source:"@site/docs/tutorials/react/updating-state-from-components.md",sourceDirName:"tutorials/react",slug:"/tutorials/react/updating-state-from-components",permalink:"/engine/docs/tutorials/react/updating-state-from-components",draft:!1,unlisted:!1,editUrl:"https://github.com/code11/engine/edit/master/docs/docs/tutorials/react/updating-state-from-components.md",tags:[],version:"current",frontMatter:{id:"updating-state-from-components",title:"Updating State from Components",sidebar_label:"Updating State"},sidebar:"docs",previous:{title:"Accessing State",permalink:"/engine/docs/tutorials/react/accessing-state-in-components"},next:{title:"Producers",permalink:"/engine/docs/tutorials/react/introducing-producers"}},c={},r=[{value:"Many faced component",id:"many-faced-component",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["Rendering our state in components is one piece of the puzzle, another piece is\nmanipulating state from components. Changes below make it possible to toggle the\nstatus of ",(0,o.jsx)(n.code,{children:"Todo"}),"s."]}),"\n",(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.code,{children:"src/Todo.tsx"}),","]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:'- const Todo: view = ({ title = observe.todosById[prop.id].title }) => (\n+ const Todo: view = ({\n+   title = observe.todosById[prop.id].title,\n+   status = observe.todosById[prop.id].status,\n+   updateStatus = update.todosById[prop.id].status\n+ }) => (\n  <li>\n    <div className="view">\n-      <input className="toggle" type="checkbox" />\n+       <input\n+         className="toggle"\n+         type="checkbox"\n+         checked={status === TodoStatuses.done}\n+         onChange={() =>\n+           updateStatus.set(\n+             status === TodoStatuses.done\n+               ? TodoStatuses.pending\n+               : TodoStatuses.done\n+           )\n+         }\n+       />\n      <label>{title}</label>\n      <button className="destroy" />\n    </div>\n  </li>\n);\n\nexport default Todo;\n'})}),"\n",(0,o.jsx)(n.p,{children:"Above snippet:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Uses ",(0,o.jsx)(n.code,{children:"observe.todosById<todoId>.status"})," for deciding whether the checkbox for\nthe ",(0,o.jsx)(n.code,{children:"Todo"})," is checked or not"]}),"\n",(0,o.jsxs)(n.li,{children:["Uses ",(0,o.jsx)(n.code,{children:"update.todosById<todoId>.status"})," to change status of the TodoItem.\n",(0,o.jsx)(n.a,{href:"/docs/api/update",children:"update"})," is the dual of ",(0,o.jsx)(n.a,{href:"/docs/api/observe",children:"observe"}),".\nObserve allows reading any value from the global state, Update allows\nchanging them. ",(0,o.jsx)(n.code,{children:"update.<path>"})," returns an object with a number of methods to\nconveniently work with our state. You can read ",(0,o.jsxs)(n.a,{href:"/docs/api/update",children:["more about ",(0,o.jsx)(n.code,{children:"update"})," in api\ndocs"]}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"many-faced-component",children:"Many faced component"}),"\n",(0,o.jsxs)(n.p,{children:["To make the ",(0,o.jsx)(n.code,{children:"Todo"}),"s editable, the HTML elements that are used to display the\nTodoItem need to be changed. Instead of rendering ",(0,o.jsx)(n.code,{children:"title"})," in a ",(0,o.jsx)(n.code,{children:"<label>"}),", an\n",(0,o.jsx)(n.code,{children:"<input>"})," serves the purpose of editing the title better. It's fair to say that\n",(0,o.jsx)(n.code,{children:"Todo"}),' can be in one of two modes at a time: "viewing" or "editing".']}),"\n",(0,o.jsxs)(n.p,{children:["Create an enum for all different modes a Todo can be in. In ",(0,o.jsx)(n.code,{children:"src/types.tsx"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:'+ export enum TodoModes {\n+   viewing = "viewing",\n+   editing = "editing"\n+ }\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Also update the type for ",(0,o.jsx)(n.code,{children:"TodoItem"})," to support TodoMode. In ",(0,o.jsx)(n.code,{children:"src/types.tsx"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:"export interface TodoItem {\n  id: string;\n  title: string;\n  status: TodoStatuses;\n+ mode: TodoModes;\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In such scenarios, Engine recommends that views should be split into different\nStates. Go ahead and create two versions for our ",(0,o.jsx)(n.code,{children:"Todo"})," component for the two\nstates it can be in. For better separation of related code, different states of\n",(0,o.jsx)(n.code,{children:"Todo"})," component are put in their own files."]}),"\n",(0,o.jsxs)(n.p,{children:["Rename ",(0,o.jsx)(n.code,{children:"src/Todo.tsx"})," to ",(0,o.jsx)(n.code,{children:"src/Todo/index.tsx"})]}),"\n",(0,o.jsxs)(n.p,{children:["This will not need a change in other components which import ",(0,o.jsx)(n.code,{children:"Todo"})," (i.e ",(0,o.jsx)(n.code,{children:"App"}),"),\nand gives a directory to nicely keep ",(0,o.jsx)(n.code,{children:"Todo.View"})," and ",(0,o.jsx)(n.code,{children:"Todo.Edit"})," close together."]}),"\n",(0,o.jsxs)(n.p,{children:["Create ",(0,o.jsx)(n.code,{children:"src/Todo/View.tsx"})," with following contents"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { TodoStatuses } from "../types";\n\nconst View: view = ({\n  title = observe.todosById[prop.id].title,\n  status = observe.todosById[prop.id].status,\n  updateStatus = update.todosById[prop.id].status,\n}) => (\n  <li>\n    <div className="view">\n      <input\n        className="toggle"\n        type="checkbox"\n        checked={status === TodoStatuses.done}\n        onChange={() =>\n          updateStatus.set(\n            status === TodoStatuses.done\n              ? TodoStatuses.pending\n              : TodoStatuses.done\n          )\n        }\n      />\n      <label>{title}</label>\n      <button className="destroy" />\n    </div>\n  </li>\n);\n\nexport default View;\n'})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Todo.tsx"})," view is practically renamed to ",(0,o.jsx)(n.code,{children:"Todo/View.tsx"})]}),"\n",(0,o.jsxs)(n.p,{children:["For the editing mode of ",(0,o.jsx)(n.code,{children:"Todo"}),", create ",(0,o.jsx)(n.code,{children:"src/Todo/Edit.tsx"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'const Edit: view = ({\n  title = observe.todosById[prop.id].title,\n  updateTodo = update.todosById[prop.id],\n}) => (\n  <li className="editing">\n    <input\n      className="edit"\n      value={title}\n      onChange={(e) => updateTodo.merge({ title: e.currentTarget.value })}\n    />\n  </li>\n);\n\nexport default Edit;\n'})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"src/Todo/index.tsx"})," can simply be a logical component which decides the\nappropriate view based on Todo's state. In ",(0,o.jsx)(n.code,{children:"src/Todo/index.tsx"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import View from "./View";\nimport Edit from "./Edit";\nimport { TodoModes } from "../types";\n\nconst uiStates = {\n  [TodoModes.editing]: Edit,\n  [TodoModes.viewing]: View,\n};\n\nconst Fallback = ({ id }: { id: string }) => {\n  console.warn("Invalid UI State for Todo with Id", id);\n\n  return null;\n};\n\nconst Todo: view = ({ id, mode = observe.todosById[prop.id].mode }) => {\n  const Component = uiStates[mode as TodoModes] || Fallback;\n\n  return <Component id={id} />;\n};\n\nexport default Todo;\n'})}),"\n",(0,o.jsx)(n.p,{children:"This explicitly calls out how different todo modes correspond to different\ncomponents, and adds a safe fallback in case our Todo is in an invalid state.\nSafest fallback is one which is least error prone. In this case, it is simply to\nrender nothing."}),"\n",(0,o.jsxs)(n.p,{children:["Update todo items in initial state to also have a mode. In ",(0,o.jsx)(n.code,{children:"src/index.tsx"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:'      todosById: {\n        todo1: {\n          id: "todo1",\n          title: "Add initial state to engine",\n          isDone: false,\n+         mode: "viewing"\n        },\n        todo2: {\n          id: "todo2",\n          title: "Use initial state in components",\n          isDone: false,\n+         mode: "viewing"\n        }\n      },\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Change ",(0,o.jsx)(n.code,{children:"TodoItem.mode"})," of todos in state whenever user double clicks a\n",(0,o.jsx)(n.code,{children:"Todo.View"}),". In ",(0,o.jsx)(n.code,{children:"src/Todo/View.tsx"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:'+ import { TodoModes } from "../types";\n...\nconst View: view = ({\n  title = observe.todosById[prop.id].title,\n  status = observe.todosById[prop.id].status,\n- updateStatus = update.todosById[prop.id].status\n+ updateTodo = update.todosById[prop.id]\n}) => (\n    <li>\n      <div className="view">\n        <input\n          className="toggle"\n          type="checkbox"\n          checked={status === TodoStatuses.done}\n          onChange={() =>\n-           updateStatus.set(\n-             status === TodoStatuses.done\n-               ? TodoStatuses.pending\n-               : TodoStatuses.done\n-           )\n+           updateTodo.merge({\n+             status:\n+               status === TodoStatuses.done\n+                 ? TodoStatuses.pending\n+                 : TodoStatuses.done\n+           })\n          }\n        />\n-       <label>{title}</label>\n+       <label\n+         onDoubleClick={() => updateTodo.merge({ mode: TodoModes.editing })}\n+       >\n+         {title}\n+       </label>\n'})}),"\n",(0,o.jsx)(n.p,{children:"Above snippet:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Changed ",(0,o.jsx)(n.code,{children:"update"})," from ",(0,o.jsx)(n.code,{children:"update.todosById[prop.id].status"})," to\n",(0,o.jsx)(n.code,{children:"update.todosById[prop.id]"}),". Since we want to update more than just status of\na Todo, it's better to minimize our component's API surface and get an\n",(0,o.jsx)(n.a,{href:"/docs/api/update",children:"update"})," for the whole Todo item"]}),"\n",(0,o.jsx)(n.li,{children:"Updates the method of changing status of the todo is updated as a consequence of #1"}),"\n",(0,o.jsx)(n.li,{children:"Adds an event-listener to change the mode of Todo when user double-clicks\nthe todo title"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Update ",(0,o.jsx)(n.code,{children:"src/Todo/Edit.tsx"})," so Todo can switch back to ",(0,o.jsx)(n.code,{children:"viewing"})," mode:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:'+ import { TodoModes } from "../types";\n...\n      <input\n        className="edit"\n        defaultValue={title}\n        onChange={e => updateTodo.merge({ title: e.currentTarget.value })}\n+       onBlur={() => updateTodo.merge({ mode: TodoModes.viewing })}\n      />\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Next section introduces ",(0,o.jsx)(n.a,{href:"/docs/api/producer",children:"producer"}),"s, which are another core\nconcept of Engine."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},9596:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(7402);const s={},d=o.createContext(s);function i(e){const n=o.useContext(d);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(d.Provider,{value:n},e.children)}}}]);