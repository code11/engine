"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6187],{935:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var r=n(7250),i=n(9596);const s={id:"triggers",title:"Triggers",sidebar_label:"Triggers"},a=void 0,o={id:"patterns/triggers",title:"Triggers",description:"Triggers are explicit actions that are recorded in the state. Triggers resemble",source:"@site/docs/patterns/triggers.md",sourceDirName:"patterns",slug:"/patterns/triggers",permalink:"/engine/docs/patterns/triggers",draft:!1,unlisted:!1,editUrl:"https://github.com/code11/engine/edit/master/docs/docs/patterns/triggers.md",tags:[],version:"current",frontMatter:{id:"triggers",title:"Triggers",sidebar_label:"Triggers"},sidebar:"docs",previous:{title:"Sections",permalink:"/engine/docs/patterns/sections"},next:{title:"Testing",permalink:"/engine/docs/testing"}},c={},d=[];function g(e){const t={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Triggers are explicit actions that are recorded in the state. Triggers resemble\nan event but without the event boilerplate. A trigger is a recording than an\nintent, made by someone or something and might be acted-on (or not) by a\nproducer."}),"\n",(0,r.jsxs)(t.p,{children:["The intent is captured in the form of a path. For example an update to\n",(0,r.jsx)(t.code,{children:"path.articles.triggers.delete"})," will record the fact that a certain article\nneeds to be deleted."]}),"\n",(0,r.jsx)(t.p,{children:"The main way in which a trigger is recored is by the use of a timestamp. The\npath where the trigger is saved defines what the trigger means. Because of this,\nthe trigger only needs to supply to the state, the fact that at a certain time,\nthat intent was recorded. Some triggers will need a bigger set of data to ensure\na certain action can be performed."}),"\n",(0,r.jsx)(t.p,{children:"Usually triggers are bounded by a certain collection or domain."}),"\n",(0,r.jsx)(t.p,{children:"As a rule of thumb, a single producer should react on a certain trigger.\nOtherwise race conditions are possible and will likely occur as you cannot\ncontrol which producer will execute first."}),"\n",(0,r.jsx)(t.p,{children:"After a producer decides that a trigger is valid for its execution, the producer\nshould clear the data at that trigger, thus making it obvious that the trigger\nwas consumed."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"{\n  user: {\n    isAuth: false,\n    data: {\n      id: undefined\n      name: undefined,\n    }\n    credentials: {\n      username: '',\n      password: ''\n    },\n    triggers: {\n      login: timestamp,\n      logout: timestamp,\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"{\n  shoppingCart: {\n    items: { ... },\n    triggers: {\n      add: timestamp,\n      remove: timestamp,\n      empty: timestamp,\n      checkout: timestamp\n    }\n  }\n}\n"})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},9596:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(7402);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);