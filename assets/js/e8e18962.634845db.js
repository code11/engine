"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4819],{8431:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var o=t(7250),s=t(9596);const i={id:"accessing-state-in-components",title:"Accessing State in Components",sidebar_label:"Accessing State"},c=void 0,d={id:"tutorials/react/accessing-state-in-components",title:"Accessing State in Components",description:"Converting a React Component to Engine view allow accessing",source:"@site/docs/tutorials/react/accessing-state-in-components.md",sourceDirName:"tutorials/react",slug:"/tutorials/react/accessing-state-in-components",permalink:"/engine/docs/tutorials/react/accessing-state-in-components",draft:!1,unlisted:!1,editUrl:"https://github.com/code11/engine/edit/master/docs/docs/tutorials/react/accessing-state-in-components.md",tags:[],version:"current",frontMatter:{id:"accessing-state-in-components",title:"Accessing State in Components",sidebar_label:"Accessing State"},sidebar:"docs",previous:{title:"State is King",permalink:"/engine/docs/tutorials/react/state-is-king"},next:{title:"Updating State",permalink:"/engine/docs/tutorials/react/updating-state-from-components"}},a={},l=[];function r(e){const n={a:"a",code:"code",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["Converting a React Component to Engine ",(0,o.jsx)(n.a,{href:"/docs/api/view",children:"view"})," allow accessing\ntodos from state In ",(0,o.jsx)(n.code,{children:"src/App.tsx"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:'- const App = () => (\n+ const App: view = ({ todoIds = observe.visibleTodoIds }) => (\n  <section className="todoapp">\n+     {console.log("TODOS", todoIds)}\n'})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"App"})," component is labeled as a ",(0,o.jsx)(n.code,{children:"view"})]}),"\n",(0,o.jsxs)(n.li,{children:["In ",(0,o.jsx)(n.code,{children:"App"}),"'s header, ",(0,o.jsx)(n.code,{children:"observe.visibileTodoIds"})," allow reading ",(0,o.jsx)(n.code,{children:"State.visibileTodoIds"})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Todos ids from state can be seen printed in console! Engine allow observing any\npart of the state by assigning it as ",(0,o.jsx)(n.code,{children:"observe.<path>"})," in header of a ",(0,o.jsx)(n.code,{children:"view"}),".\nAll engine operator types are available globally. Check them out in ",(0,o.jsx)(n.code,{children:"global.ts"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Extract the ",(0,o.jsx)(n.code,{children:"<Todo>"})," component out of",(0,o.jsx)(n.code,{children:"<App>"})," to easily ",(0,o.jsx)(n.code,{children:"map"})," todo ids to",(0,o.jsx)(n.code,{children:"Todo"}),"\ncomponents, and put it in its own file. In ",(0,o.jsx)(n.code,{children:"src/Todo.tsx"}),", add"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'const Todo = ({ id }) => (\n  <li>\n    <div className="view">\n      <input className="toggle" type="checkbox" />\n      <label>{id}</label>\n      <button className="destroy" />\n    </div>\n  </li>\n);\n\nexport default Todo;\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Update the ",(0,o.jsx)(n.code,{children:"App"})," component with:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:'+ import Todo from \'./Todo\';\n...\n      <ul className="todo-list">\n-       <li>\n-         <div className="view">\n-           <input className="toggle" type="checkbox" />\n-           <label>Give life to my TODOs</label>\n-           <button className="destroy" />\n-         </div>\n-       </li>\n+       {todoIds.map((id: string) => (\n+         <Todo id={id} key={id} />\n+       ))}\n      </ul>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["As per the implementation of",(0,o.jsx)(n.code,{children:"Todo"}),", it is possible to see todo ids(i.e",(0,o.jsx)(n.code,{children:"todo1"}),",\n",(0,o.jsx)(n.code,{children:"todo2"}),") in browser. But it should actually show",(0,o.jsx)(n.code,{children:"TodoItem.title"}),", not their\nid."]}),"\n",(0,o.jsxs)(n.p,{children:["This is where Engine differs from traditional React apps. Engine recommends that\n[parent component should pass minimal data to its children](docs / best -\npractices#pass - minimal - data - to - children). Minimum amount of data needed\nto render a ",(0,o.jsx)(n.code,{children:"Todo"})," is its ",(0,o.jsx)(n.code,{children:"id"}),". Right todo can be retrieved from global state\nwith its id. Modify the ",(0,o.jsx)(n.code,{children:"Todo"})," component to follow the Engine way:"]}),"\n",(0,o.jsxs)(n.p,{children:["In",(0,o.jsx)(n.code,{children:"src/Todo.tsx"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:'- const Todo = ({ id }) => (\n+ const Todo: view = ({ title = observe.todosById[prop.id].title }) => (\n<li>\n  <div className="view">\n    <input className="toggle" type="checkbox" />\n-     <label>{id}</label>\n+     <label>{title}</label>\n    <button className="destroy" />\n  </div>\n</li>\n);\n'})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Todo"})," is converted to a ",(0,o.jsx)(n.a,{href:"/docs/api/view",children:"view"})," (by labeling it with ",(0,o.jsx)(n.code,{children:"view"})," macro)"]}),"\n",(0,o.jsxs)(n.li,{children:["Assigning ",(0,o.jsx)(n.code,{children:"title"})," to ",(0,o.jsx)(n.code,{children:"observe.todosById[prop.id].title"})," in view header gives\naccess to the title of a todo from the global state"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"/docs/api/prop",children:"prop"})," allow ",(0,o.jsx)(n.a,{href:"/docs/concepts/path-composition",children:"composing\npaths"})," for accessing data from global\nstate. ",(0,o.jsx)(n.code,{children:"prop.<path>"})," gives access to all the ",(0,o.jsx)(n.a,{href:"https://reactjs.org/docs/components-and-props.html",children:"React\nprops"})," passed to a component\nby its parent."]}),"\n",(0,o.jsxs)(n.p,{children:["Every ",(0,o.jsx)(n.code,{children:"view"})," in Engine can access any data path from Engine's global state.\nTrick is getting the right thing. The input macros help achieving clever ways of\n",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/concepts/path-composition",children:"path composition"})})," to get the\nright data into views."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"observe.todosById[prop.id].title"})," tells Engine to look-up a todo with ",(0,o.jsx)(n.code,{children:"prop.id"}),"\nin ",(0,o.jsx)(n.code,{children:"todosById"})," object of the global state, and observe its ",(0,o.jsx)(n.code,{children:"title"})," property. This\ngives read-only access to ",(0,o.jsx)(n.code,{children:"title"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["This also ensures that the view gets re-rendered whenever ",(0,o.jsx)(n.code,{children:"title"})," property of\ntodo with id ",(0,o.jsx)(n.code,{children:"prop.id"})," changes. Any other changes that happen in the state, even\nin the todo itself will not affect the view."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(r,{...e})}):r(e)}},9596:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>d});var o=t(7402);const s={},i=o.createContext(s);function c(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);