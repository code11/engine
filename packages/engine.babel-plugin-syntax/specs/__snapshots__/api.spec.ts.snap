// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`engine.babel-plugin-syntax should ignore other types: should ignore other types 1`] = `

const result: foo = ({
  a1 = '123',
}) => { }

      ↓ ↓ ↓ ↓ ↓ ↓

const result: foo = ({ a1 = "123" }) => {};


`;

exports[`engine.babel-plugin-syntax should keep values in paths: should keep values in paths 1`] = `

const val = "321"
const obj = {
  foo: {
    bar: "234"
  }
}
const a: producer = ({
  a1 = get.foo[123],
  a2 = get.foo[val],
  a3 = get.foo["val"].foo,
  a4 = get.foo[obj.foo.bar].baz,
  a5 = get.foo[prop.foo][Request.foo][param.bar].baz,
  a6 = get.foo[\`bam\${val}baz\`].foo,
}) => {  }

      ↓ ↓ ↓ ↓ ↓ ↓

const val = "321";
const obj = {
  foo: {
    bar: "234",
  },
};
const a = {
  fn: ({ a1, a2, a3, a4, a5, a6 }) => {},
  props: {
    type: "STRUCT",
    value: {
      a1: {
        type: "GET",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "CONST",
            value: "123",
          },
        ],
      },
      a2: {
        type: "GET",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "CONST",
            value: val,
          },
        ],
      },
      a3: {
        type: "GET",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "CONST",
            value: "val",
          },
          {
            type: "CONST",
            value: "foo",
          },
        ],
      },
      a4: {
        type: "GET",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "CONST",
            value: obj.foo.bar,
          },
          {
            type: "CONST",
            value: "baz",
          },
        ],
      },
      a5: {
        type: "GET",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "EXTERNAL",
            path: ["foo"],
          },
          {
            type: "CONST",
            value: Request.foo,
          },
          {
            type: "INVOKE",
            path: ["bar"],
          },
          {
            type: "CONST",
            value: "baz",
          },
        ],
      },
      a6: {
        type: "GET",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "CONST",
            value: \`bam\${val}baz\`,
          },
          {
            type: "CONST",
            value: "foo",
          },
        ],
      },
    },
  },
  type: "producer",
  buildId: "unique_id",
};


`;

exports[`engine.babel-plugin-syntax should support arg: should support arg 1`] = `

const result: producer = ({
  a1 = '123',
  a2 = arg.a1,
  a3 = arg.a2[arg.a1],
  a4 = arg.a3[prop.foo],
}) => { }

      ↓ ↓ ↓ ↓ ↓ ↓

const result = {
  fn: ({ a1, a2, a3, a4 }) => {},
  props: {
    type: "STRUCT",
    value: {
      a1: {
        type: "VALUE",
        value: {
          type: "CONST",
          value: "123",
        },
      },
      a2: {
        type: "VALUE",
        value: {
          type: "INTERNAL",
          path: ["a1"],
        },
      },
      a3: {
        type: "VALUE",
        value: {
          type: "INTERNAL",
          path: ["a2", "$a1"],
        },
      },
      a4: {
        type: "VALUE",
        value: {
          type: "INTERNAL",
          path: ["a3", "@foo"],
        },
      },
    },
  },
  type: "producer",
  buildId: "unique_id",
};


`;

exports[`engine.babel-plugin-syntax should support constructors: should support constructors 1`] = `

const result: producer = ({
  _get = get,
  _update = update,
  _observe = observe
}) => { }

      ↓ ↓ ↓ ↓ ↓ ↓

const result = {
  fn: ({ _get, _update, _observe }) => {},
  props: {
    type: "STRUCT",
    value: {
      _get: {
        type: "CONSTRUCTOR",
        value: "get",
      },
      _update: {
        type: "CONSTRUCTOR",
        value: "update",
      },
      _observe: {
        type: "CONSTRUCTOR",
        value: "observe",
      },
    },
  },
  type: "producer",
  buildId: "unique_id",
};


`;

exports[`engine.babel-plugin-syntax should support get refining: should support get refining 1`] = `

const result: producer = ({
  a = get.foo.value(),
  b = get.foo[param.id].value({ id: 123 }),
  c = get.foo.length(),
  d = get.foo.includes("foo"),
}) => {
}

      ↓ ↓ ↓ ↓ ↓ ↓

const result = {
  fn: ({ a, b, c, d }) => {},
  props: {
    type: "STRUCT",
    value: {
      a: {
        type: "GET",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "REFINEE",
            value: {
              type: "value",
              args: [],
            },
          },
        ],
      },
      b: {
        type: "GET",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "INVOKE",
            path: ["id"],
          },
          {
            type: "REFINEE",
            value: {
              type: "value",
              args: [
                {
                  type: "CONST",
                  value: {
                    id: 123,
                  },
                },
              ],
            },
          },
        ],
      },
      c: {
        type: "GET",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "REFINEE",
            value: {
              type: "length",
              args: [],
            },
          },
        ],
      },
      d: {
        type: "GET",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "REFINEE",
            value: {
              type: "includes",
              args: [
                {
                  type: "CONST",
                  value: "foo",
                },
              ],
            },
          },
        ],
      },
    },
  },
  type: "producer",
  buildId: "unique_id",
};


`;

exports[`engine.babel-plugin-syntax should support get: should support get 1`] = `

const result: producer = ({
  a1 = get.foo,
  a2 = get[prop.foo],
  a3 = get[arg.a2],
  a4 = get.foo[prop.bar.baz],
  a5 = get.foo.bar[arg.a2],
  a6 = {
    baz: get.foo[arg.a4].baz,
  },
  a7 = get.foo[arg.a5.baz],
  a8 = get.foo[param.prop],
  a9 = get.foo[param.prop].baz,
  a10 = get.foo[param.prop].baz[prop.a2]
}) => { }

      ↓ ↓ ↓ ↓ ↓ ↓

const result = {
  fn: ({ a1, a2, a3, a4, a5, a6, a7, a8, a9, a10 }) => {},
  props: {
    type: "STRUCT",
    value: {
      a1: {
        type: "GET",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
        ],
      },
      a2: {
        type: "GET",
        path: [
          {
            type: "EXTERNAL",
            path: ["foo"],
          },
        ],
      },
      a3: {
        type: "GET",
        path: [
          {
            type: "INTERNAL",
            path: ["a2"],
          },
        ],
      },
      a4: {
        type: "GET",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "EXTERNAL",
            path: ["bar", "baz"],
          },
        ],
      },
      a5: {
        type: "GET",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "CONST",
            value: "bar",
          },
          {
            type: "INTERNAL",
            path: ["a2"],
          },
        ],
      },
      a6: {
        type: "STRUCT",
        value: {
          baz: {
            type: "GET",
            path: [
              {
                type: "CONST",
                value: "foo",
              },
              {
                type: "INTERNAL",
                path: ["a4"],
              },
              {
                type: "CONST",
                value: "baz",
              },
            ],
          },
        },
      },
      a7: {
        type: "GET",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "INTERNAL",
            path: ["a5", "baz"],
          },
        ],
      },
      a8: {
        type: "GET",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "INVOKE",
            path: ["prop"],
          },
        ],
      },
      a9: {
        type: "GET",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "INVOKE",
            path: ["prop"],
          },
          {
            type: "CONST",
            value: "baz",
          },
        ],
      },
      a10: {
        type: "GET",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "INVOKE",
            path: ["prop"],
          },
          {
            type: "CONST",
            value: "baz",
          },
          {
            type: "EXTERNAL",
            path: ["a2"],
          },
        ],
      },
    },
  },
  type: "producer",
  buildId: "unique_id",
};


`;

exports[`engine.babel-plugin-syntax should support observe: should support observe 1`] = `

const result: producer = ({
  a1 = observe.foo,
  a2 = observe[prop.foo],
  a3 = observe[arg.a2],
  a4 = observe.foo[prop.bar.baz],
  a5 = observe.foo.bar[arg.a2],
  a6 = {
    baz: observe.foo[arg.a4].baz,
  }
}) => { }

      ↓ ↓ ↓ ↓ ↓ ↓

const result = {
  fn: ({ a1, a2, a3, a4, a5, a6 }) => {},
  props: {
    type: "STRUCT",
    value: {
      a1: {
        type: "OBSERVE",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
        ],
      },
      a2: {
        type: "OBSERVE",
        path: [
          {
            type: "EXTERNAL",
            path: ["foo"],
          },
        ],
      },
      a3: {
        type: "OBSERVE",
        path: [
          {
            type: "INTERNAL",
            path: ["a2"],
          },
        ],
      },
      a4: {
        type: "OBSERVE",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "EXTERNAL",
            path: ["bar", "baz"],
          },
        ],
      },
      a5: {
        type: "OBSERVE",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "CONST",
            value: "bar",
          },
          {
            type: "INTERNAL",
            path: ["a2"],
          },
        ],
      },
      a6: {
        type: "STRUCT",
        value: {
          baz: {
            type: "OBSERVE",
            path: [
              {
                type: "CONST",
                value: "foo",
              },
              {
                type: "INTERNAL",
                path: ["a4"],
              },
              {
                type: "CONST",
                value: "baz",
              },
            ],
          },
        },
      },
    },
  },
  type: "producer",
  buildId: "unique_id",
};


`;

exports[`engine.babel-plugin-syntax should support prop: should support prop 1`] = `

const result: producer = ({
  bam,
  foo = prop.foo,
  bar = prop.foo[prop.baz],
  baz = prop.foo[arg.bar][prop.baz]
}) => { }

      ↓ ↓ ↓ ↓ ↓ ↓

const result = {
  fn: ({ bam, foo, bar, baz }) => {},
  props: {
    type: "STRUCT",
    value: {
      bam: {
        type: "VALUE",
        value: {
          type: "EXTERNAL",
          path: ["bam"],
        },
      },
      foo: {
        type: "VALUE",
        value: {
          type: "EXTERNAL",
          path: ["foo"],
        },
      },
      bar: {
        type: "VALUE",
        value: {
          type: "EXTERNAL",
          path: ["foo", "@baz"],
        },
      },
      baz: {
        type: "VALUE",
        value: {
          type: "EXTERNAL",
          path: ["foo", "$bar", "@baz"],
        },
      },
    },
  },
  type: "producer",
  buildId: "unique_id",
};


`;

exports[`engine.babel-plugin-syntax should support update: should support update 1`] = `

const result: producer = ({
  a1 = update.foo,
  a2 = update[prop.foo],
  a3 = update[arg.a2],
  a4 = update.foo[prop.bar.baz],
  a5 = update.foo.bar[arg.a2],
  a6 = {
    baz: update.foo[arg.a4].baz,
  },
  a7 = update.foo[prop.a5.baz],
  a8 = update.foo[param.prop],
  a9 = update.foo[param.prop].baz,
  a10 = update.foo[param.prop].baz[prop.a2]
}) => { }

      ↓ ↓ ↓ ↓ ↓ ↓

const result = {
  fn: ({ a1, a2, a3, a4, a5, a6, a7, a8, a9, a10 }) => {},
  props: {
    type: "STRUCT",
    value: {
      a1: {
        type: "UPDATE",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
        ],
      },
      a2: {
        type: "UPDATE",
        path: [
          {
            type: "EXTERNAL",
            path: ["foo"],
          },
        ],
      },
      a3: {
        type: "UPDATE",
        path: [
          {
            type: "INTERNAL",
            path: ["a2"],
          },
        ],
      },
      a4: {
        type: "UPDATE",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "EXTERNAL",
            path: ["bar", "baz"],
          },
        ],
      },
      a5: {
        type: "UPDATE",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "CONST",
            value: "bar",
          },
          {
            type: "INTERNAL",
            path: ["a2"],
          },
        ],
      },
      a6: {
        type: "STRUCT",
        value: {
          baz: {
            type: "UPDATE",
            path: [
              {
                type: "CONST",
                value: "foo",
              },
              {
                type: "INTERNAL",
                path: ["a4"],
              },
              {
                type: "CONST",
                value: "baz",
              },
            ],
          },
        },
      },
      a7: {
        type: "UPDATE",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "EXTERNAL",
            path: ["a5", "baz"],
          },
        ],
      },
      a8: {
        type: "UPDATE",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "INVOKE",
            path: ["prop"],
          },
        ],
      },
      a9: {
        type: "UPDATE",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "INVOKE",
            path: ["prop"],
          },
          {
            type: "CONST",
            value: "baz",
          },
        ],
      },
      a10: {
        type: "UPDATE",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "INVOKE",
            path: ["prop"],
          },
          {
            type: "CONST",
            value: "baz",
          },
          {
            type: "EXTERNAL",
            path: ["a2"],
          },
        ],
      },
    },
  },
  type: "producer",
  buildId: "unique_id",
};


`;

exports[`engine.babel-plugin-syntax should support wildcard: should support wildcard 1`] = `

const foo: producer = ({
  id = wildcard,
  boo = observe.foo[arg.id].foo,
  bar = observe.foo[wildcard].bar
}) => {}

      ↓ ↓ ↓ ↓ ↓ ↓

const foo = {
  fn: ({ id, boo, bar }) => {},
  props: {
    type: "STRUCT",
    value: {
      id: {
        type: "VALUE",
        value: {
          type: "CONST",
          value: wildcard,
        },
      },
      boo: {
        type: "OBSERVE",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "INTERNAL",
            path: ["id"],
          },
          {
            type: "CONST",
            value: "foo",
          },
        ],
      },
      bar: {
        type: "OBSERVE",
        path: [
          {
            type: "CONST",
            value: "foo",
          },
          {
            type: "CONST",
            value: wildcard,
          },
          {
            type: "CONST",
            value: "bar",
          },
        ],
      },
    },
  },
  type: "producer",
  buildId: "unique_id",
};


`;
